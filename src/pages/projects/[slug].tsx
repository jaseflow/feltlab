import { useContext, useEffect, useState } from 'react';
import fs from 'fs';
import path from 'path';
import matter from 'gray-matter';
import Cover from '../../components/cover';
import { serialize } from 'next-mdx-remote/serialize';
import {MDXRemote} from 'next-mdx-remote';

import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import styles from '../../styles/Slug.module.css'
import { AppContext } from '../../context';

const Project: NextPage = ({ frontMatter, mdxSource, slugs, slugIndex }: any) => {

  const [nextLink, setNextLink] = useState('');

  const { loading } = useContext(AppContext);

  useEffect(() => {
    if (slugIndex === slugs.length - 1) {
      setNextLink(`/projects/${slugs[0]}`);
    } else {
      setNextLink(`/projects/${slugs[slugIndex + 1]}`);
    }
  })

  return (
    <div className={styles.slug}>
      <Head>
        <title>Projects</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className={styles.grid}>
        <div className={`${styles.cover} ${loading ? styles.coverLoading : ''}`}>
          <Cover
            covered={true}
            name={frontMatter.title}
            logoWidth={frontMatter.coverLogoWidth}
            logoHeight={frontMatter.coverLogoHeight}
            screenImgUrl={frontMatter.coverScreenshotUrl}
            logoImgUrl={frontMatter.coverLogoUrl}
            bgColor={frontMatter.coverBackgroundColor}
          />
          <div className={styles.nav}>
            <Link href={nextLink}><a className="btn btn--tertiary">Next project</a></Link>
          </div>
        </div>
        <div className={`${styles.body} ${loading ? styles.bodyLoading : ''}`}>
          <h1>{frontMatter.title}</h1>
          <p className={styles.description}>{frontMatter.description}</p>
          <MDXRemote {...mdxSource} />
        </div>
      </div>

    </div>
  )
}

export default Project;

export const getStaticPaths = () => {
  const files = fs.readdirSync(path.join('src', 'posts', 'projects'));

  const paths = files.map(filename => {
    return {
      params: {
        slug: filename.split('.')[0]
      }
    }
  })

  return {
    paths,
    fallback: false
  }
}

export const getStaticProps = async ({ params: { slug } } : any) => {

  const files = fs.readdirSync(path.join('src', 'posts', 'projects'))

  const slugs = files.map(f => f.split('.')[0]);
  const slugIndex = slugs.findIndex(s => s === slug);

  const markdownWithMeta = fs.readFileSync(path.join('src', 'posts', 'projects', `${slug}.mdx`))

  const { data: frontMatter, content } = matter(markdownWithMeta);
  const mdxSource = await serialize(content);

  return {
    props: {
      frontMatter,
      slug,
      mdxSource,
      slugs,
      slugIndex
    }
  }

}
